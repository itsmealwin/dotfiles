priority -50

# Many of the snippets here use a global option called
# "g:ultisnips_java_brace_style" which, if set to "nl" will put a newline
# before '{' braces.
# Setting "g:ultisnips_java_junit" will change how the test method snippet
# looks, it is defaulted to junit4, setting this option to 3 will remove the
# @Test annotation from the method

global !p
def junit(snip):
	if snip.opt("g:ultisnips_java_junit", "") == "3":
		snip += ""
	else:
		snip.rv += "@Test\n\t"

def nl(snip):
	if snip.opt("g:ultisnips_java_brace_style", "") == "nl":
		snip += ""
	else:
		snip.rv += " "
def getArgs(group):
	import re
	word = re.compile('[a-zA-Z><.]+ \w+')
	return [i.split(" ") for i in word.findall(group) ]

def camel(word):
	if not word: return ''
	return word[0].upper() + word[1:]

def mixedCase(word):
	if not word: return ''
	return word[0].lower() + word[1:]

endglobal

# ================================================================================
# Assertions
# ================================================================================

snippet ab "abstract" b
abstract $0
endsnippet

snippet as "assert" b
assert ${1:test}${2/(.+)/(?1: \: ")/}${2:Failure message}${2/(.+)/(?1:")/};
endsnippet

snippet at "assert true" b
assertTrue(${1:actual});
endsnippet

snippet af "assert false" b
assertFalse(${1:actual});
endsnippet

snippet ae "assert equals" b
assertEquals(${1:expected}, ${2:actual});
endsnippet

# ================================================================================
# VARIABLES
# ================================================================================

snippet const "constant" bA
public static final ${1:String} ${2:var} = $3;$0
endsnippet

snippet fi "final" b
final $0
endsnippet

snippet /i|n/ "new primitive or int" br
${1:int} ${2:i} = ${3:1};
$0
endsnippet

snippet obj "new Object or variable" bA
${1:private }${2:Object} ${3:var} = new $2(${4});
endsnippet

snippet var "field" bA
${1:private }${2:String} ${3:`!p snip.rv = t[2].lower()`};
endsnippet

# ================================================================================
# ITERATION
# ================================================================================

snippet fore "for (each)" bA
for ($1 : $2)`!p nl(snip)`{
	$0
}
endsnippet

snippet fori "for" bA
for (int ${1:i} = 0; $1 < ${2:10}; $1++)`!p nl(snip)`{
	$0
}
endsnippet

snippet for "for" b
for ($1; $2; $3)`!p nl(snip)`{
	$0
}
endsnippet

snippet whi "while" bA
while ($1)`!p nl(snip)`{
	$0
}
endsnippet

snippet swi "switch" b
switch ($1)`!p nl(snip)`{
	case $2: $0
}
endsnippet

snippet cs "case" b
case $1:
	$2
$0
endsnippet

snippet de "default" b
default:
	$0
endsnippet

snippet brk "break" bA
break;
$0
endsnippet

# ================================================================================
# CONDITIONALS
# ================================================================================

snippet if "if" bA
if ($1)`!p nl(snip)`{
	$2${VISUAL}
} $0
endsnippet

snippet elif "else if" wA
else if ($1)`!p nl(snip)`{
	$2${VISUAL}
} $0
endsnippet

snippet else "else" wA
else`!p nl(snip)`{
	$1${VISUAL}
} $0
endsnippet

snippet sleep "try sleep catch" bA
try {
	Thread.sleep(${1:1000});
} catch (InterruptedException e){
	e.printStackTrace();
}
endsnippet

# ================================================================================
# IMPORTS
# ================================================================================

snippet imt "import junit_framework_TestCase;"  b
import junit.framework.TestCase;
$0
endsnippet

snippet im "import"  b
import ${1:java}.${2:util}.$0;
endsnippet

snippet j.b "java_beans_" i
java.beans.
endsnippet

snippet j.i "java_io" i
java.io.
endsnippet

snippet j.m "java_math" i
java.math.
endsnippet

snippet j.n "java_net_" i
java.net.
endsnippet

snippet j.u "java_util_"  i
java.util.
endsnippet

# ================================================================================
# CLASS DECLARATIONS
# ================================================================================

snippet in "interface" w
interface ${1:`!p snip.rv = snip.basename or "untitled"`} ${2:extends ${3:Parent} }{
	$0
}
endsnippet

snippet pa "package" b
package $0
endsnippet

snippet cc "constructor call or setter body"
this.${1:var} = $1;
endsnippet

snippet cn "Constructor" b
public `!p snip.rv = snip.basename or "untitled"`(${1:}) {
	$0
}
endsnippet

snippet cn "constructor, \w fields + assigments" b
	`!p
args = getArgs(t[1])
for i in args:
	snip.rv += "\n\tprivate " + i[0] + " " + i[1]+ ";"
if len(args) > 0:
	snip.rv += "\n"`
public `!p snip.rv = snip.basename or "unknown"`($1) { `!p
args = getArgs(t[1])
for i in args:
	snip.rv += "\n\t\tthis.%s = %s;" % (i[1], i[1])
if len(args) == 0:
	snip.rv += "\n"`
}
endsnippet

snippet cle "class extends" b
public class ${1:`!p
snip.rv = snip.basename or "untitled"`} ${2:extends ${3:Parent} }${4:implements ${5:Interface} }{
	$0
}
endsnippet

snippet clc "class with constructor, fields, setter and getters" b
public class `!p
snip.rv = snip.basename or "untitled"` {
`!p
args = getArgs(t[1])
if len(args) == 0: snip.rv = ""
for i in args:
	snip.rv += "\n\tprivate " + i[0] + " " + i[1]+ ";"
if len(args) > 0:
	snip.rv += "\n"`
	public `!p snip.rv = snip.basename or "unknown"`($1) { `!p
args = getArgs(t[1])
for i in args:
	snip.rv += "\n\t\tthis." + i[1] + " = " + i[1] + ";"
if len(args) == 0:
	snip.rv += "\n"`
	}$0
`!p
args = getArgs(t[1])
if len(args) == 0: snip.rv = ""
for i in args:
	snip.rv += "\n\tpublic void set" + camel(i[1]) + "(" + i[0] + " " + i[1] + ") {\n" + "\
	\tthis." + i[1] + " = " + i[1] + ";\n\t}\n"

	snip.rv += "\n\tpublic " + i[0] + " get" + camel(i[1]) + "() {\
	\n\t\treturn " + i[1] + ";\n\t}\n"
`
}
endsnippet

snippet clc "class with constructor, with field names" b
public class `!p
snip.rv = snip.basename or "untitled"` {
`!p
args = getArgs(t[1])
for i in args:
	snip.rv += "\n\tprivate " + i[0] + " " + i[1]+ ";"
if len(args) > 0:
	snip.rv += "\n"`
	public `!p snip.rv = snip.basename or "unknown"`($1) { `!p
args = getArgs(t[1])
for i in args:
	snip.rv += "\n\t\tthis.%s = %s;" % (i[1], i[1])
if len(args) == 0:
	snip.rv += "\n"`
	}
}
endsnippet

snippet class "class and constructor" bA
public class `!p
snip.rv = snip.basename or "untitled"` {

	/**
	 * Constructor
	 **/
	public `!p snip.rv = snip.basename or "untitled"`($2) {
		$0
	}
}
endsnippet

snippet cl "class" b
public class ${1:`!p
snip.rv = snip.basename or "untitled"`} {
	$0
}
endsnippet

# ================================================================================
# COLLECTIONS
# ================================================================================

snippet list "Collections List" w
List<${1:String}> ${2:list}$0
endsnippet

snippet nlist "Collections List" bA
List<${1:String}> ${2:list} = new ${3:Array}List<>();
endsnippet

snippet nmap "Collections Map" bA
Map<${1:String}, ${2:String}> ${3:map} = new ${4:Hash}Map<>();
endsnippet

snippet nset "Collections Set" bA
Set<${1:String}> ${2:set} = new ${3:Hash}Set<>();
endsnippet

snippet str "String" wA
String $0
endsnippet

# ================================================================================
# METHODS
# ================================================================================

snippet main "method (main)" bA
/**
 * The main method
 *
 * @param args the arguments given to the main method
 *
 **/
public static void main(String[] args)`!p nl(snip)`{
	${VISUAL}${0}
}
endsnippet

snippet logw "Logger warn"  bA
LOGGER.warn("$1");
$0
endsnippet

snippet logd "Logger debug"  bA
LOGGER.debug("$1");
$0
endsnippet

snippet loge "Logger error"  bA
LOGGER.error("$1");
$0
endsnippet

snippet logi "Logger info"  bA
LOGGER.info("$1");
$0
endsnippet

snippet syso "println"  bA
System.out.println("$1");
$0
endsnippet

snippet syse "println"  bA
System.err.println("$1");
$0
endsnippet

snippet try "try/catch" bA
try {
	${VISUAL}${1}
} catch(${2:Exception} ${3:e}){
	${4:e.printStackTrace();}
}
endsnippet

snippet catch "catch" bA
catch (${1:Exception} ${2:e})`!p nl(snip)`{
	$0
}
endsnippet

snippet mtd "Method With javadoc" bA
/**
 * ${7:Short Description}
 * `!p
for i in getArgs(t[4]):
	snip.rv += "\n\t * @param " + i[1] + " usage..."`
 * `!p
if "throws" in t[5]:
	snip.rv = "\n\t * @throws " + t[6]
else:
	snip.rv = ""` `!p
if not "void" in t[2]:
	snip.rv = "\n\t * @return object"
else:
	snip.rv = ""`
 **/
${1:public} ${2:void} ${3:method}($4) ${5:throws $6 }{
	${VISUAL}${0}
}
endsnippet

snippet /get(ter)?/ "getter" brA
/**
 * Getter method
 *
 * @return object
 **/
public ${1:String} get${2:Name}() {
	return `!p snip.rv = mixedCase(t[2])`;
}
endsnippet

snippet /set(ter)?/ "setter" brA
/**
 * Setter method
 * `!p
snip.rv += "\n\t * @param " + t[2]`
 * @return object
 **/
public void set${1:Name}(${2:String} `!p snip.rv = mixedCase(t[1])`) {
	this.`!p snip.rv = mixedCase(t[1])` = `!p snip.rv = mixedCase(t[1])`;
}
endsnippet

snippet mt "method throws" b
${1:private} ${2:void} ${3:method}(${4}) ${5:throws $6 }{
	$0
}
endsnippet

snippet m  "method" b
${1:private} ${2:void} ${3:method}(${4}) {
	$0
}
endsnippet

snippet /se?tge?t|ge?tse?t|gs/ "setter and getter" br
/**
 * Setter method
 * `!p
snip.rv += "\n\t * @param " + $2`
 * @return object
 **/
public void set${1:Name}(${2:String} `!p snip.rv = mixedCase(t[1])`) {
	this.`!p snip.rv = mixedCase(t[1])` = `!p snip.rv = mixedCase(t[1])`;
}

/**
 * Getter method
 *
 * @return object
 **/
public $2 get$1() {
	return `!p snip.rv = mixedCase(t[1])`;
}
endsnippet

# ================================================================================
# JAVADOCS
# ================================================================================

snippet jlk "Javadoc Link" wA
{@link ${1:${VISUAL:String}}} $0
endsnippet

snippet jcd "Javadoc code" wA
{@code ${1:${VISUAL:String}}} $0
endsnippet

snippet jpm "Javadoc parameter" wA
@param ${1:parameter} ${2:description}
$0
endsnippet

snippet jre "Javadoc return" wA
@return ${1:description}
endsnippet

# ================================================================================
# KEYWORDS
# ================================================================================

snippet pri "private" bA
private$0
endsnippet

snippet pro "protected" bA
protected$0
endsnippet

snippet pub "public" bA
public$0
endsnippet

snippet ret "return" bA
return$0
endsnippet

snippet sta "static" A
static$0
endsnippet

snippet thr "throw" bA
throw new$0
endsnippet

snippet syn "synchronized"
synchronized$0
endsnippet

snippet tc "test case"
public class ${1:`!p snip.rv = snip.basename or "untitled"`} extends ${2:TestCase}`!p nl(snip)`{
	$0
}
endsnippet

snippet t "test" b
`!p junit(snip)`public void test${1:Name}() {
	$0
}
endsnippet

snippet tt "test throws" b
`!p junit(snip)`public void test${1:Name}() ${2:throws Exception }{
	$0
}
endsnippet

# vim:ft=snippets:
